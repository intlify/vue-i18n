// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`@.caml:{'no apples'} | {0} apple | {n}　apples > ast 1`] = `
{
  "body": {
    "cases": [
      {
        "end": 19,
        "items": [
          {
            "end": 20,
            "key": {
              "end": 20,
              "loc": {
                "end": {
                  "column": 21,
                  "line": 1,
                  "offset": 20,
                },
                "start": {
                  "column": 8,
                  "line": 1,
                  "offset": 7,
                },
              },
              "start": 7,
              "type": 9,
              "value": "no apples",
            },
            "loc": {
              "end": {
                "column": 21,
                "line": 1,
                "offset": 20,
              },
              "start": {
                "column": 1,
                "line": 1,
                "offset": 0,
              },
            },
            "modifier": {
              "end": 6,
              "loc": {
                "end": {
                  "column": 7,
                  "line": 1,
                  "offset": 6,
                },
                "start": {
                  "column": 2,
                  "line": 1,
                  "offset": 1,
                },
              },
              "start": 1,
              "type": 8,
              "value": "caml",
            },
            "start": 0,
            "type": 6,
          },
        ],
        "loc": {
          "end": {
            "column": 21,
            "line": 1,
            "offset": 20,
          },
          "start": {
            "column": 1,
            "line": 1,
            "offset": 0,
          },
        },
        "start": 0,
        "type": 2,
      },
      {
        "end": 26,
        "items": [
          {
            "end": 26,
            "index": 0,
            "loc": {
              "end": {
                "column": 27,
                "line": 1,
                "offset": 26,
              },
              "start": {
                "column": 24,
                "line": 1,
                "offset": 23,
              },
            },
            "start": 23,
            "type": 5,
          },
          {
            "end": 32,
            "loc": {
              "end": {
                "column": 33,
                "line": 1,
                "offset": 32,
              },
              "start": {
                "column": 27,
                "line": 1,
                "offset": 26,
              },
            },
            "start": 26,
            "type": 3,
            "value": " apple",
          },
        ],
        "loc": {
          "end": {
            "column": 33,
            "line": 1,
            "offset": 32,
          },
          "start": {
            "column": 24,
            "line": 1,
            "offset": 23,
          },
        },
        "start": 23,
        "type": 2,
      },
      {
        "end": 45,
        "items": [
          {
            "end": 38,
            "key": "n",
            "loc": {
              "end": {
                "column": 39,
                "line": 1,
                "offset": 38,
              },
              "start": {
                "column": 36,
                "line": 1,
                "offset": 35,
              },
            },
            "start": 35,
            "type": 4,
          },
          {
            "end": 45,
            "loc": {
              "end": {
                "column": 46,
                "line": 1,
                "offset": 45,
              },
              "start": {
                "column": 39,
                "line": 1,
                "offset": 38,
              },
            },
            "start": 38,
            "type": 3,
            "value": "　apples",
          },
        ],
        "loc": {
          "end": {
            "column": 46,
            "line": 1,
            "offset": 45,
          },
          "start": {
            "column": 36,
            "line": 1,
            "offset": 35,
          },
        },
        "start": 35,
        "type": 2,
      },
    ],
    "end": 45,
    "loc": {
      "end": {
        "column": 46,
        "line": 1,
        "offset": 45,
      },
      "start": {
        "column": 1,
        "line": 1,
        "offset": 0,
      },
    },
    "start": 0,
    "type": 1,
  },
  "end": 45,
  "loc": {
    "end": {
      "column": 46,
      "line": 1,
      "offset": 45,
    },
    "source": "@.caml:{'no apples'} | {0} apple | {n}　apples",
    "start": {
      "column": 1,
      "line": 1,
      "offset": 0,
    },
  },
  "start": 0,
  "type": 0,
}
`;

exports[`@.caml:{'no apples'} | {0} apple | {n}　apples > code 1`] = `
"function __msg__ (ctx) {
  const { normalize: _normalize, linked: _linked, type: _type, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx
  return _plural([
    _normalize([
      _linked("no apples", "caml", _type)
    ]), _normalize([
      _interpolate(_list(0)), " apple"
    ]), _normalize([
      _interpolate(_named("n")), "　apples"
    ])
  ])
}"
`;

exports[`@.caml:{'no apples'} | {0} apple | {n}　apples > map 1`] = `undefined`;

exports[`arrow mode >  | | |  > code 1`] = `"(ctx) => {const { normalize: _normalize, plural: _plural } = ctx;return _plural([_normalize([]), _normalize([]), _normalize([]), _normalize([])])}"`;

exports[`arrow mode > !#%^&*()-_+=[]:;?.<>"\` > code 1`] = `"(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hi ", "!#%^&*()-_+=[]:;?.<>\\"\`", " !"])}"`;

exports[`arrow mode > @.caml:{'no apples'} | {0} apple | {n}　apples > code 1`] = `"(ctx) => {const { normalize: _normalize, linked: _linked, type: _type, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx;return _plural([_normalize([_linked("no apples", "caml", _type)]), _normalize([_interpolate(_list(0)), " apple"]), _normalize([_interpolate(_named("n")), "　apples"])])}"`;

exports[`arrow mode > hello world > code 1`] = `"(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hello world"])}"`;

exports[`arrow mode > hello\\n world > code 1`] = `"(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hello\\n world"])}"`;

exports[`arrow mode > hi @.upper:{'name'} ! > code 1`] = `"(ctx) => {const { normalize: _normalize, linked: _linked, type: _type } = ctx;return _normalize(["hi ", _linked("name", "upper", _type), " !"])}"`;

exports[`arrow mode > hi { 'kazupon' }! > code 1`] = `"(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hi ", "kazupon", "!"])}"`;

exports[`arrow mode > hi {0}! > code 1`] = `"(ctx) => {const { normalize: _normalize, interpolate: _interpolate, list: _list } = ctx;return _normalize(["hi ", _interpolate(_list(0)), "!"])}"`;

exports[`arrow mode > hi {name}! > code 1`] = `"(ctx) => {const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;return _normalize(["hi ", _interpolate(_named("name")), "!"])}"`;

exports[`compiler options > jit: true > ast 1`] = `
{
  "body": {
    "items": [
      {
        "type": 3,
      },
    ],
    "static": "hello world",
    "type": 2,
  },
  "type": 0,
}
`;

exports[`compiler options > location: false > ast 1`] = `
{
  "body": {
    "items": [
      {
        "type": 3,
        "value": "hello world",
      },
    ],
    "type": 2,
  },
  "type": 0,
}
`;

exports[`compiler options > minify: true > ast 1`] = `
{
  "b": {
    "i": [
      {
        "t": 3,
      },
    ],
    "s": "hello world",
    "t": 2,
  },
  "t": 0,
}
`;

exports[`compiler options > optimize: false > ast 1`] = `
{
  "body": {
    "items": [
      {
        "type": 3,
        "value": "hello world",
      },
    ],
    "type": 2,
  },
  "type": 0,
}
`;

exports[`compiler options > warning > ast 1`] = `
{
  "body": {
    "end": 12,
    "items": [
      {
        "end": 6,
        "key": "msg",
        "loc": {
          "end": {
            "column": 7,
            "line": 1,
            "offset": 6,
          },
          "start": {
            "column": 2,
            "line": 1,
            "offset": 1,
          },
        },
        "modulo": true,
        "start": 1,
        "type": 4,
      },
      {
        "end": 12,
        "loc": {
          "end": {
            "column": 13,
            "line": 1,
            "offset": 12,
          },
          "start": {
            "column": 7,
            "line": 1,
            "offset": 6,
          },
        },
        "start": 6,
        "type": 3,
        "value": " world",
      },
    ],
    "loc": {
      "end": {
        "column": 13,
        "line": 1,
        "offset": 12,
      },
      "start": {
        "column": 1,
        "line": 1,
        "offset": 0,
      },
    },
    "start": 0,
    "type": 2,
  },
  "end": 12,
  "loc": {
    "end": {
      "column": 13,
      "line": 1,
      "offset": 12,
    },
    "source": "%{msg} world",
    "start": {
      "column": 1,
      "line": 1,
      "offset": 0,
    },
  },
  "start": 0,
  "type": 0,
}
`;

exports[`edge cases >  | | |  > code 1`] = `
"function __msg__ (ctx) {
  const { normalize: _normalize, plural: _plural } = ctx
  return _plural([
    _normalize([
      
    ]), _normalize([
      
    ]), _normalize([
      
    ]), _normalize([
      
    ])
  ])
}"
`;

exports[`edge cases >  | | |  > error 1`] = `
{
  "code": 11,
  "domain": "parser",
  "location": {
    "end": {
      "column": 8,
      "line": 1,
      "offset": 7,
    },
    "start": {
      "column": 1,
      "line": 1,
      "offset": 0,
    },
  },
  "message": "Plural must have messages",
}
`;

exports[`edge cases > % > code 1`] = `
"function __msg__ (ctx) {
  const { normalize: _normalize } = ctx
  return _normalize([
    "%"
  ])
}"
`;

exports[`edge cases > %{nickname} %{action} issue %{code} > code 1`] = `
"function __msg__ (ctx) {
  const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx
  return _normalize([
    _interpolate(_named("nickname")), " ", _interpolate(_named("action")), " issue ", _interpolate(_named("code"))
  ])
}"
`;

exports[`edge cases > {_field} with the same value already exists. > code 1`] = `
"function __msg__ (ctx) {
  const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx
  return _normalize([
    _interpolate(_named("_field")), " with the same value already exists."
  ])
}"
`;

exports[`edge cases > hi %s ! > code 1`] = `
"function __msg__ (ctx) {
  const { normalize: _normalize } = ctx
  return _normalize([
    "hi %s !"
  ])
}"
`;

exports[`edge cases > hi @._upper:{_name} ! > code 1`] = `
"function __msg__ (ctx) {
  const { normalize: _normalize, interpolate: _interpolate, named: _named, linked: _linked, type: _type } = ctx
  return _normalize([
    "hi ", _linked(_interpolate(_named("_name")), "_upper", _type), " !"
  ])
}"
`;

exports[`edge cases > no apples %| one apple % |  too much apples   > code 1`] = `
"function __msg__ (ctx) {
  const { normalize: _normalize, plural: _plural } = ctx
  return _plural([
    _normalize([
      "no apples %"
    ]), _normalize([
      "one apple %"
    ]), _normalize([
      "too much apples  "
    ])
  ])
}"
`;
